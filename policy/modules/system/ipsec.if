## <summary>TCP/IP encryption</summary>

########################################
## <summary>
##	Execute ipsec in the ipsec domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`ipsec_domtrans',`
	gen_require(`
		type ipsec_t, ipsec_exec_t;
	')

	domtrans_pattern($1, ipsec_exec_t, ipsec_t)
')

########################################
## <summary>
##	Connect to IPSEC using a unix domain stream socket.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`ipsec_stream_connect',`
	gen_require(`
		type ipsec_t, ipsec_run_t;
	')

	files_search_pids($1)
	stream_connect_pattern($1, ipsec_run_t, ipsec_run_t, ipsec_t)
')

########################################
## <summary>
##	Execute the IPSEC management program in the ipsec mgmt domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`ipsec_domtrans_mgmt',`
	gen_require(`
		type ipsec_mgmt_t, ipsec_mgmt_exec_t;
	')

	domtrans_pattern($1, ipsec_mgmt_exec_t, ipsec_mgmt_t)
')

########################################
## <summary>
##	Execute the IPSEC management program in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`ipsec_exec_mgmt',`
	gen_require(`
		type ipsec_mgmt_exec_t;
	')

	can_exec($1, ipsec_mgmt_exec_t)
')

########################################
## <summary>
##	Send ipsec mgmt a general signal.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
#
interface(`ipsec_signal_mgmt',`
	gen_require(`
		type ipsec_mgmt_t;
	')

	allow $1 ipsec_mgmt_t:process signal;
')

########################################
## <summary>
##	Send ipsec mgmt a null signal.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
#
interface(`ipsec_signull_mgmt',`
	gen_require(`
		type ipsec_mgmt_t;
	')

	allow $1 ipsec_mgmt_t:process signull;
')

########################################
## <summary>
##	Send ipsec mgmt a kill signal.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
#
interface(`ipsec_kill_mgmt',`
	gen_require(`
		type ipsec_mgmt_t;
	')

	allow $1 ipsec_mgmt_t:process sigkill;
')

######################################
## <summary>
##	Send and receive messages from
##	ipsec-mgmt over dbus.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`ipsec_mgmt_dbus_chat',`
	gen_require(`
		type ipsec_mgmt_t;
		class dbus send_msg;
	')

	allow $1 ipsec_mgmt_t:dbus send_msg;
	allow ipsec_mgmt_t $1:dbus send_msg;
')

########################################
## <summary>
##	All of the rules required to
##	administrate an ipsec environment.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`ipsec_admin',`
	gen_require(`
		type ipsec_t, ipsec_initrc_exec_t, ipsec_conf_file_t;
		type ipsec_key_file_t, ipsec_mgmt_t, ipsec_supervisor_run_t;
		type ipsec_run_t, ipsec_mgmt_lock_t;
		type ipsec_unit_t, ipsec_supervisor_t;
	')

	allow $1 { ipsec_mgmt_t ipsec_supervisor_t ipsec_t }:process { ptrace signal_perms };
	ps_process_pattern($1, { ipsec_mgmt_t ipsec_supervisor_t ipsec_t })

	init_startstop_service($1, $2, ipsec_t, ipsec_initrc_exec_t, ipsec_unit_t)

	ipsec_exec_mgmt($1)
	ipsec_stream_connect($1)

	files_search_etc($1)
	admin_pattern($1, { ipsec_conf_file_t ipsec_key_file_t })

	files_search_pids($1)
	admin_pattern($1, { ipsec_run_t ipsec_supervisor_run_t })

	files_search_locks($1)
	admin_pattern($1, ipsec_mgmt_lock_t)
')
